{"name":"Android Logger","tagline":"Simple Log Wrapper over android.util.Log class","body":"Android Logger\r\n==============\r\n\r\nIt is hard to work with log levels when using android.util.Log class.   \r\nThe methods are short and not very readable, like Log.d, Log.e, etc... There aren`t many options to format the log.    \r\nAlso, there are a few bugs, like logging a null String will crash the app.    \r\n\r\nThis project is a simple wrapper above the android.util.Log class. It is similar to Apache Commons Logging, as many may be used to.\r\nThe log levels available are: verbose, debug, info, warn and error.\r\n\r\nThis an example of how to obtain a Logger instance:\r\n\r\n```java\r\n//using a String as Log Tag\r\nLogger logger = LoggerFactory.getLogger(\"LOG_TAG\");\r\n\r\n//using a class name as Log Tag\r\nLogger logger = LoggerFactory.getLogger(getClass());\r\n```\r\n\r\nThese are some of the log methods available:\r\n\r\n```java\r\n//logging a String message\r\nlogger.debug(\"String message\");\r\n\r\n//logging a String using arguments to format the string (message and params are used with String.format())\r\nlogger.info(\"String with params: Param 1 = %s, Param 2 = %s\", \"Param 1 Value\", \"Param 2 Value\");\r\n\r\n//logging a Exception\r\nlogger.error(e);\r\n\r\n//logging a message and a Exception\r\nlogger.error(\"Message\", e);\r\n```\r\n\r\nHow to set the desired log level for logging (default is Level.INFO):\r\n\r\n```java\r\nLoggerFactory.setLevel(LoggerLevel.DEBUG);\r\n```\r\n\r\nHow to filter log messages that can impact performance:\r\n\r\n```java\r\nif (logger.isDebugEnabled()) {\r\n   logger.debug(\"Message \" + variable + \" something else...\");\r\n}\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}